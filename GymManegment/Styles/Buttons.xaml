<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:Custom="http://schemas.microsoft.com/winfx/2006/xaml/presentation/ribbon"
                     xmlns:local="clr-namespace:GymManegment">

        <ResourceDictionary.MergedDictionaries>
            <!-- Order is important -->
            <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Fonts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Hoverless button -->
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- System Icon Button -->
    <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">

        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Padding" Value="10" />

    </Style>

    <!-- Window Control Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}" />

        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5" />
            </Setter.Value>
        </Setter>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundLightBrush}" />
            </Trigger>
        </Style.Triggers>
        
    </Style>
    
    <!-- Window Close Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
            </Trigger>
        </Style.Triggers>
        
    </Style>






     <Style x:Key="RibbonCheckBoxStyle1" TargetType="{x:Type Custom:RibbonCheckBox}">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                            <GradientStop Color="#FFE7E7F7" Offset="0"/>
                            <GradientStop Color="White" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#FFB5BEDE"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="MouseOverBorderBrush" Value="{Binding Ribbon.MouseOverBorderBrush, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="MouseOverBackground" Value="{Binding Ribbon.MouseOverBackground, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="PressedBorderBrush" Value="{Binding Ribbon.PressedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="PressedBackground" Value="{Binding Ribbon.PressedBackground, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="CheckedBorderBrush" Value="{Binding Ribbon.CheckedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="CheckedBackground" Value="{Binding Ribbon.CheckedBackground, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="FocusedBorderBrush" Value="{Binding Ribbon.FocusedBorderBrush, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="FocusedBackground" Value="{Binding Ribbon.FocusedBackground, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                <Setter Property="QuickAccessToolBarControlSizeDefinition">
                    <Setter.Value>
                        <Custom:RibbonControlSizeDefinition IsLabelVisible="True" ImageSize="Collapsed"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Custom:RibbonCheckBox}">
                            <Border x:Name="MainBorder" Margin="1,1,30,1">
                                <StackPanel x:Name="StackPanel" Background="Transparent" Margin="82,1,3,1" Orientation="Vertical" SnapsToDevicePixels="True">
                                    <Image x:Name="Image" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="32" Margin="1" Source="{TemplateBinding LargeImageSource}" VerticalAlignment="Center" Width="32"/>
                                    <Grid x:Name="Grid" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center">
                                        <Grid HorizontalAlignment="Center" Margin="1" VerticalAlignment="Top">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Border x:Name="PART_CheckBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="White" Height="Auto" Width="Auto" Margin="-20,-7,5,-9">
                                                    <Grid>
                                                        <Border x:Name="MiddleBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" Margin="1"/>
                                                        <Border x:Name="InnerBorder" BorderThickness="1" Background="Transparent" Margin="1">
                                                            <Border.BorderBrush>
                                                                <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                                                    <GradientStop Color="#80F7F7FF" Offset="0"/>
                                                                    <GradientStop Color="#F0F7F7FF" Offset="1"/>
                                                                </LinearGradientBrush>
                                                            </Border.BorderBrush>
                                                        </Border>
                                                        <Path x:Name="CheckMark" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Opacity="0" Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="0.4" Margin="0,-0.667,0,0.667"/>
                                                    </Grid>
                                                </Border>
                                            </Grid>
                                            <Image x:Name="SmallImage" RenderOptions.BitmapScalingMode="NearestNeighbor" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Height="16" Margin="2,0,1,0" Source="{TemplateBinding SmallImageSource}" Visibility="Collapsed" VerticalAlignment="Center" Width="16"/>
                                            <Grid x:Name="TwoLineTextPanel" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Custom:RibbonTwoLineText x:Name="TwoLineText" LineStackingStrategy="BlockLineHeight" LineHeight="13" Margin="0,1,10,-1" TextAlignment="Center" Text="{TemplateBinding Label}"/>
                                                <Rectangle x:Name="FocusVisual" Margin="1" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2" Visibility="Collapsed"/>
                                            </Grid>
                                        </Grid>
                                    </Grid>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Large">
                                    <Setter Property="MinWidth" Value="44"/>
                                    <Setter Property="Height" Value="66"/>
                                    <Setter Property="MinHeight" TargetName="Grid" Value="26"/>
                                    <Setter Property="Custom:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText" Value="True"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small">
                                    <Setter Property="MinWidth" Value="22"/>
                                    <Setter Property="Height" Value="22"/>
                                    <Setter Property="Visibility" TargetName="Image" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="SmallImage" Value="Visible"/>
                                    <Setter Property="Margin" TargetName="TwoLineText" Value="2,0"/>
                                    <Setter Property="Orientation" TargetName="StackPanel" Value="Horizontal"/>
                                    <Setter Property="Custom:RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText" Value="False"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Small"/>
                                        <Condition Binding="{Binding IsInQuickAccessToolBar, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Height" Value="Auto"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Self}}" Value="False">
                                    <Setter Property="Visibility" TargetName="TwoLineTextPanel" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Self}}" Value="Collapsed">
                                    <Setter Property="Visibility" TargetName="Image" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="SmallImage" Value="Collapsed"/>
                                    <Setter Property="Height" Value="22"/>
                                </DataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="Image" Value="0.5"/>
                                    <Setter Property="Opacity" TargetName="SmallImage" Value="0.5"/>
                                    <Setter Property="Opacity" TargetName="PART_CheckBorder" Value="0.5"/>
                                    <Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="#FF9E9E9E"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding HighContrast}" Value="True">
                                    <Setter Property="BorderBrush" TargetName="PART_CheckBorder" Value="{DynamicResource ċ}"/>
                                    <Setter Property="Background" TargetName="PART_CheckBorder" Value="{DynamicResource Č}"/>
                                    <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                    <Setter Property="Background" TargetName="MiddleBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                    <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                                    <Setter Property="Data" TargetName="CheckMark" Value="M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4z"/>
                                    <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent"/>
                                    <Setter Property="Stroke" TargetName="FocusVisual" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderBrush" TargetName="PART_CheckBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Background" TargetName="MiddleBorder" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckMark"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiDataTrigger.EnterActions>
                                    <MultiDataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.4" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckMark"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiDataTrigger.ExitActions>
                                    <Setter Property="BorderBrush" TargetName="PART_CheckBorder" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="{Binding CheckedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Background" TargetName="MiddleBorder" Value="{Binding CheckedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                        <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderBrush" TargetName="PART_CheckBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="{Binding FocusedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Background" TargetName="MiddleBorder" Value="{Binding FocusedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiDataTrigger>
                                <Trigger Property="ShowKeyboardCues" Value="True">
                                    <Setter Property="Visibility" TargetName="FocusVisual" Value="Visible"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HighContrast}" Value="False"/>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderBrush" TargetName="PART_CheckBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Background" TargetName="MiddleBorder" Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="InnerBorder">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="#40FFFEFE" Offset="0"/>
                                                <GradientStop Color="#40FFFEFE" Offset="0.39"/>
                                                <GradientStop Color="#20FFCE68" Offset="0.39"/>
                                                <GradientStop Color="#20FFCE68" Offset="0.69"/>
                                                <GradientStop Color="#10FFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsChecked" Value="True"/>
                                        <Condition Property="IsKeyboardFocused" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="InnerBorder">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="#40FFFEFE" Offset="0"/>
                                                <GradientStop Color="#40FFFEFE" Offset="0.39"/>
                                                <GradientStop Color="#20FFCE68" Offset="0.39"/>
                                                <GradientStop Color="#20FFCE68" Offset="0.69"/>
                                                <GradientStop Color="#10FFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True"/>
                                        <Condition Property="IsKeyboardFocused" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="InnerBorder">
                                        <Setter.Value>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="#40FFFEFE" Offset="0"/>
                                                <GradientStop Color="#40FFFEFE" Offset="0.39"/>
                                                <GradientStop Color="#20FFCE68" Offset="0.39"/>
                                                <GradientStop Color="#20FFCE68" Offset="0.69"/>
                                                <GradientStop Color="#10FFFFFF" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </MultiTrigger>
                                <Trigger Property="IsInControlGroup" Value="True">
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{Binding Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" TargetName="MainBorder" Value="0,0,1,0"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Opacity" TargetName="CheckMark" Value="1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsInControlGroup, RelativeSource={RelativeSource Self}}" Value="True"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="TextElement.Foreground" TargetName="MainBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



    <Style x:Key="NormalizeButten" TargetType="{x:Type Button}">

   
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="border" Property="TextElement.Foreground" Value="Green"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                   
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                        
                        
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="DefaultButten" TargetType="{x:Type Button}">
     
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FontFamily" Value="B YEKAN"/>
   
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="10" x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#FF4BC772"/>
                       
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value ="Red"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value ="Red"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Regular button -->
    <Style x:Key="StaticButten" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

        <Setter Property="Background" Value="{StaticResource WordOrangeBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
        <Setter Property="FontFamily" Value="B Yekan" />
        <Setter Property="Padding" Value="50 10" />
        <Setter Property="Margin" Value="0 10" />

     

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            CornerRadius="10"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                     
                     
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource WordBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource WordOrange}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Text button -->
    <Style x:Key="TextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
        <Setter Property="Padding" Value="50 10" />
        <Setter Property="Margin" Value="0 10" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            CornerRadius="10"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource WordOrangeBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Icon button -->
    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

        <Setter Property="Background" Value="{StaticResource WordBlueBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="Padding" Value="30" />
        <Setter Property="Margin" Value="0" />

        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}" 
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource WordLightBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource WordBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>